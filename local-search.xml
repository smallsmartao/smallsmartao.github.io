<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nn-bias总结</title>
    <link href="/2022/07/09/nnbias/"/>
    <url>/2022/07/09/nnbias/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>端到端系统在落地的时候，我们需要加强对一些词的识别，这些词包括命名实体、地名、网络热词等等，但是对于一个上线的系统，我们不可能每次更换热词列表都扩充数据，重新<br>训练模型，所以就出现了很多bias的技术，之前主要是基于语言模型的各种fusion，包括shallow fusion和WFST插值和合并等，还有一种基于神经网络的bias方法，我们重点介绍这种方法。</p><h2 id="On-the-fly-Rescoring"><a href="#On-the-fly-Rescoring" class="headerlink" title="On-the-fly Rescoring"></a>On-the-fly Rescoring</h2><p><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/43816.pdf">https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/43816.pdf</a><br>这是一种基于WFST的方法，但是非常重要，现在很多热词系统就是基于这个方法。</p><h2 id="C-LAS"><a href="#C-LAS" class="headerlink" title="C-LAS"></a>C-LAS</h2><p><a href="https://arxiv.org/pdf/1808.02480.pdf">https://arxiv.org/pdf/1808.02480.pdf</a><br>Contextualized LAS 提出基于nn的bias方法，后面的很多方法都是基于这个方法的迁移，这篇论文也解释了很多nn-bias中的细节，以及这种方法的可解释性。</p><h3 id="bias-embedding"><a href="#bias-embedding" class="headerlink" title="bias embedding"></a>bias embedding</h3><p>首先需要提取热词的列表的embedding，将不同长度的热词都变成一个embedding的形式，本文采用一个LSTN，将最后一个状态作为embedding。<br><img src="https://s2.loli.net/2022/07/11/xzDmHAQXOiMIR42.png"> </p><h3 id="bias-attention"><a href="#bias-attention" class="headerlink" title="bias attention"></a>bias attention</h3><p>将embedding和encoder的h做attention，得到的结果和原本的拼接送入decoder。<br><img src="https://s2.loli.net/2022/07/11/MtxPOvu4N6sSgEG.png"> </p><h3 id="训练和推理"><a href="#训练和推理" class="headerlink" title="训练和推理"></a>训练和推理</h3><p>训练时随机选取热词，用一个概率控制一个batch内句子被选取热词的概率，同时对于带热词的句子在热词部分插入一个标记，来帮助bias部分的梯度更新。比如之前是“你看哔哩哔哩<bias>的哪个视频没”，热词为哔哩哔哩，那么就改写为“你看哔哩哔哩<bias>的那个视频没”。<br>推理时可以预先根据热词生成好bias_embedding，然后只需要额外做attention的计算。</bias></bias></p><h3 id="bias-condition"><a href="#bias-condition" class="headerlink" title="bias condition"></a>bias condition</h3><p>维护热词前缀的列表，只有对齐出现了前缀的时候才激活对应热词的embedding。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p><img src="https://s2.loli.net/2022/07/12/ZGTRy5Cp1FNsxia.png"></p><h4 id="非热词场景"><a href="#非热词场景" class="headerlink" title="非热词场景"></a>非热词场景</h4><p><img src="https://s2.loli.net/2022/07/12/ZGTRy5Cp1FNsxia.png"></p><h4 id="对比结果"><a href="#对比结果" class="headerlink" title="对比结果"></a>对比结果</h4><p><img src="https://s2.loli.net/2022/07/12/MiKsmbSuGr9qowY.png"></p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><p><img src="https://s2.loli.net/2022/07/12/h7x6vLWcVCKD2pT.png"></p><h2 id="Context-transformer-transducer"><a href="#Context-transformer-transducer" class="headerlink" title="Context transformer transducer"></a>Context transformer transducer</h2><p><a href="https://arxiv.org/abs/2006.03411">https://arxiv.org/abs/2006.03411</a><br>将bias做到encoder和decoder，也是基于attention的bias<br><img src="https://s2.loli.net/2022/07/12/mJshDSNfOtqXZnB.png"><br><img src="https://s2.loli.net/2022/07/12/Sx6YZWVrUbO3ImP.png"></p><h2 id="Contextual-Transformer"><a href="#Contextual-Transformer" class="headerlink" title="Contextual Transformer"></a>Contextual Transformer</h2><p>在decoder上做bias<br><img src="https://s2.loli.net/2022/07/12/SwKtzQYr1DikyU7.png"><br><img src="https://s2.loli.net/2022/07/12/aQtCbFMADlWqek4.png"></p><h2 id="一些细节和改进"><a href="#一些细节和改进" class="headerlink" title="一些细节和改进"></a>一些细节和改进</h2><h3 id="热词列表"><a href="#热词列表" class="headerlink" title="热词列表"></a>热词列表</h3><p>维护一个动态的热词池，刚开始retrain的时候热词比例高，随着训练热词比例逐渐降低。</p><h3 id="整体编码"><a href="#整体编码" class="headerlink" title="整体编码"></a>整体编码</h3><p>对热词列表坐一个整体的变换，让模型学习热词间的相关性</p><h3 id="纯化"><a href="#纯化" class="headerlink" title="纯化"></a>纯化</h3><p>推理的时候对attention分数做排序，保留topk的分数将剩下的分数设为0，重新归一化热词概率。<br><img src="https://s2.loli.net/2022/07/12/yr1DeJonLaiBHVb.png"></p><h3 id="代码细节"><a href="#代码细节" class="headerlink" title="代码细节"></a>代码细节</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextBias</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        input_size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        output_size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        vocab_size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        embedding_size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        num_layers: <span class="hljs-built_in">int</span> = <span class="hljs-number">2</span>,</span><br><span class="hljs-params">        attention_heads: <span class="hljs-built_in">int</span> = <span class="hljs-number">4</span>,</span><br><span class="hljs-params">        linear_units: <span class="hljs-built_in">int</span> = <span class="hljs-number">512</span>,</span><br><span class="hljs-params">        num_block: <span class="hljs-built_in">int</span> = <span class="hljs-number">4</span>,</span><br><span class="hljs-params">        dropout_rate: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.0</span>,</span><br><span class="hljs-params">        bias_encoder_type: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;linear&quot;</span>,</span><br><span class="hljs-params">        bias_encoder: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span><br><span class="hljs-params">    </span>):<br>        <span class="hljs-keyword">assert</span> check_argument_types()<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.input_size = input_size<br>        self.output_size = output_size<br>        self.embedding_size = embedding_size<br>        self.num_layers = num_layers<br>        self.vocab_size = vocab_size<br>        self.attention_heads = attention_heads<br>        self.linear_units = linear_units<br>        self.num_blocks = num_block<br>        self.dropout_rate = dropout_rate<br>        self.encoder_type = bias_encoder_type<br>        self.if_bias_encoder = bias_encoder<br>        self.context_extractor = BLSTM(<br>            self.vocab_size, self.embedding_size, self.num_layers)<br>          self.context_encoder = torch.nn.Sequential(torch.nn.Linear(self.embedding_size * <span class="hljs-number">4</span>,self.embedding_size),torch.nn.LayerNorm(self.embedding_size))<br>          self.encoder_bias = MultiHeadedAttention(<br>              n_head=self.attention_heads,<br>              n_feat=self.embedding_size,<br>              dropout_rate=<span class="hljs-number">0.0</span><br>          )<br>        self.encoder_norm = torch.nn.LayerNorm(self.embedding_size)<br>        self.encoder_bias_norm = torch.nn.LayerNorm(self.embedding_size)<br></code></pre></td></tr></table></figure><p>模型前向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forword_common</span>(<span class="hljs-params">self, context_list, context_lengths, h_enc</span>):<br>    bias_vector = self.context_extractor(context_list,context_lengths)<br>    bias_lengths = torch.tensor([bias_vector.shape[<span class="hljs-number">0</span>]],dtype=torch.int32,device=bias_vector.device)<br>    <span class="hljs-keyword">if</span> self.encoder_type == <span class="hljs-string">&#x27;transformer&#x27;</span>:<br>        bias_hidden, bias_mask = self.context_encoder(<br>            bias_vector.unsqueeze(<span class="hljs-number">0</span>),bias_lengths<br>        )<br>    <span class="hljs-keyword">elif</span> self.encoder_type == <span class="hljs-string">&#x27;linear&#x27;</span>:<br>        bias_hidden = self.context_encoder(bias_vector.unsqueeze(<span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">elif</span> self.encoder_type == <span class="hljs-string">&#x27;mytransformer&#x27;</span>:<br>        bias_hidden, ilens, bias_mask = self.context_encoder(<br>            bias_vector.unsqueeze(<span class="hljs-number">0</span>),bias_lengths<br>        )<br>    bias_hidden = bias_hidden.expand(h_enc.shape[<span class="hljs-number">0</span>],-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> bias_hidden<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_encoder</span>(<span class="hljs-params">self, bias_hidden, h_enc</span>):<br>    <span class="hljs-keyword">if</span> self.encoder_type == <span class="hljs-string">&#x27;mytransformer&#x27;</span>:<br>        h_enc_bias = self.encoder_bias(h_enc, bias_hidden, bias_hidden)<br>    <span class="hljs-keyword">else</span>:<br>        h_enc_bias,_ = self.encoder_bias(h_enc, bias_hidden, bias_hidden)<br>    encoder_norm_out = self.encoder_norm(h_enc)<br>    encoder_bias_norm_out = self.encoder_bias_norm(h_enc_bias)<br>    h_enc_concat = torch.cat(<br>        [encoder_norm_out, encoder_bias_norm_out],dim=-<span class="hljs-number">1</span><br>    )<br>    <br>    <span class="hljs-keyword">return</span> h_enc + self.encoder_ffn(h_enc_concat)<br><br></code></pre></td></tr></table></figure><p>decoder bias</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoderLayerContext</span>(nn.Module):<br>    <span class="hljs-string">&quot;&quot;&quot;Single decoder layer module.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        size (int): Input dimension.</span><br><span class="hljs-string">        self_attn (torch.nn.Module): Self-attention module instance.</span><br><span class="hljs-string">            `MultiHeadedAttention` instance can be used as the argument.</span><br><span class="hljs-string">        src_attn (torch.nn.Module): Inter-attention module instance.</span><br><span class="hljs-string">            `MultiHeadedAttention` instance can be used as the argument.</span><br><span class="hljs-string">        feed_forward (torch.nn.Module): Feed-forward module instance.</span><br><span class="hljs-string">            `PositionwiseFeedForward` instance can be used as the argument.</span><br><span class="hljs-string">        dropout_rate (float): Dropout rate.</span><br><span class="hljs-string">        normalize_before (bool):</span><br><span class="hljs-string">            True: use layer_norm before each sub-block.</span><br><span class="hljs-string">            False: to use layer_norm after each sub-block.</span><br><span class="hljs-string">        concat_after (bool): Whether to concat attention layer&#x27;s inpu</span><br><span class="hljs-string">            and output.</span><br><span class="hljs-string">            True: x -&gt; x + linear(concat(x, att(x)))</span><br><span class="hljs-string">            False: x -&gt; x + att(x)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        self_attn: nn.Module,</span><br><span class="hljs-params">        src_attn: nn.Module,</span><br><span class="hljs-params">        bias_attn: nn.Module,</span><br><span class="hljs-params">        feed_forward: nn.Module,</span><br><span class="hljs-params">        dropout_rate: <span class="hljs-built_in">float</span>,</span><br><span class="hljs-params">        normalize_before: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,</span><br><span class="hljs-params">        concat_after: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">    </span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Construct an DecoderLayer object.&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.size = size<br>        self.self_attn = self_attn<br>        self.src_attn = src_attn<br>        self.bias_attn = bias_attn<br>        self.feed_forward = feed_forward<br>        self.linear = nn.Linear(<span class="hljs-number">2</span> * size,size)<br>        self.norm1 = nn.LayerNorm(size, eps=<span class="hljs-number">1e-5</span>)<br>        self.norm2 = nn.LayerNorm(size, eps=<span class="hljs-number">1e-5</span>)<br>        self.norm3 = nn.LayerNorm(size, eps=<span class="hljs-number">1e-5</span>)<br>        self.dropout = nn.Dropout(dropout_rate)<br>        self.normalize_before = normalize_before<br>        self.concat_after = concat_after<br>        <span class="hljs-keyword">if</span> self.concat_after:<br>            self.concat_linear1 = nn.Linear(size + size, size)<br>            self.concat_linear2 = nn.Linear(size + size, size)<br>        <span class="hljs-keyword">else</span>:<br>            self.concat_linear1 = nn.Identity()<br>            self.concat_linear2 = nn.Identity()<br>        self.if_bias = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        tgt: torch.Tensor,</span><br><span class="hljs-params">        tgt_mask: torch.Tensor,</span><br><span class="hljs-params">        memory: torch.Tensor,</span><br><span class="hljs-params">        memory_mask: torch.Tensor,</span><br><span class="hljs-params">        bias_hidden: torch.Tensor,</span><br><span class="hljs-params">        cache: <span class="hljs-type">Optional</span>[torch.Tensor] = <span class="hljs-literal">None</span></span><br><span class="hljs-params">    </span>) -&gt; <span class="hljs-type">Tuple</span>[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]:<br>        <span class="hljs-string">&quot;&quot;&quot;Compute decoded features.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            tgt (torch.Tensor): Input tensor (#batch, maxlen_out, size).</span><br><span class="hljs-string">            tgt_mask (torch.Tensor): Mask for input tensor</span><br><span class="hljs-string">                (#batch, maxlen_out).</span><br><span class="hljs-string">            memory (torch.Tensor): Encoded memory</span><br><span class="hljs-string">                (#batch, maxlen_in, size).</span><br><span class="hljs-string">            memory_mask (torch.Tensor): Encoded memory mask</span><br><span class="hljs-string">                (#batch, maxlen_in).</span><br><span class="hljs-string">            cache (torch.Tensor): cached tensors.</span><br><span class="hljs-string">                (#batch, maxlen_out - 1, size).</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            torch.Tensor: Output tensor (#batch, maxlen_out, size).</span><br><span class="hljs-string">            torch.Tensor: Mask for output tensor (#batch, maxlen_out).</span><br><span class="hljs-string">            torch.Tensor: Encoded memory (#batch, maxlen_in, size).</span><br><span class="hljs-string">            torch.Tensor: Encoded memory mask (#batch, maxlen_in).</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># import pdb;pdb.set_trace()</span><br>        residual = tgt<br>        tgt = self.norm1(tgt)<br><br>        <span class="hljs-keyword">if</span> cache <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            tgt_q = tgt<br>            tgt_q_mask = tgt_mask<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># compute only the last frame query keeping dim: max_time_out -&gt; 1</span><br>            <span class="hljs-keyword">assert</span> cache.shape == (<br>                tgt.shape[<span class="hljs-number">0</span>],<br>                tgt.shape[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>,<br>                self.size,<br>            ), <span class="hljs-string">&quot;&#123;cache.shape&#125; == &#123;(tgt.shape[0], tgt.shape[1] - 1, self.size)&#125;&quot;</span><br>            tgt_q = tgt[:, -<span class="hljs-number">1</span>:, :]<br>            residual = residual[:, -<span class="hljs-number">1</span>:, :]<br>            tgt_q_mask = tgt_mask[:, -<span class="hljs-number">1</span>:, :]<br><br>        <span class="hljs-keyword">if</span> self.concat_after:<br>            tgt_concat = torch.cat(<br>                (tgt_q, self.self_attn(tgt_q, tgt, tgt, tgt_q_mask)[<span class="hljs-number">0</span>]), dim=-<span class="hljs-number">1</span>)<br>            x = residual + self.concat_linear1(tgt_concat)<br>        <span class="hljs-keyword">else</span>:<br>            x = residual + self.dropout(<br>                self.self_attn(tgt_q, tgt, tgt, tgt_q_mask)[<span class="hljs-number">0</span>])<br>        residual = x<br>        x = self.norm2(x)<br>        <span class="hljs-keyword">if</span> self.concat_after:<br>            x_concat = torch.cat(<br>                (x, self.src_attn(x, memory, memory, memory_mask)[<span class="hljs-number">0</span>]), dim=-<span class="hljs-number">1</span>)<br>            x = residual + self.concat_linear2(x_concat)<br>        <span class="hljs-keyword">else</span>:<br>            x_ori = self.dropout(<br>                self.src_attn(x, memory, memory, memory_mask)[<span class="hljs-number">0</span>])<br>            x_bias = self.dropout(<br>                self.bias_attn(x, bias_hidden, bias_hidden, memory_mask)[<span class="hljs-number">0</span>])<br>            x = torch.cat([x_ori,x_bias], dim=-<span class="hljs-number">1</span>)<br>            x = self.linear(x)<br>        x = self.norm3(x)<br>        x = residual + self.dropout(self.feed_forward(x))<br>        <span class="hljs-keyword">if</span> cache <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            x = torch.cat([cache, x], dim=<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> x, tgt_mask, memory, memory_mask<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>论文总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
      <tag>bias</tag>
      
      <tag>hotword</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rnnt相关总结</title>
    <link href="/2022/07/01/rnnt-overview/"/>
    <url>/2022/07/01/rnnt-overview/</url>
    
    <content type="html"><![CDATA[<h2 id="rnn-t简介"><a href="#rnn-t简介" class="headerlink" title="rnn-t简介"></a>rnn-t简介</h2><p>rnn-t三个部分：encoder，predictor，joint network<br><img src="https://s2.loli.net/2022/07/01/lNZDCIOh5Woz1KY.png" alt="rnnt"></p><ul><li>encdoer 提取声学高维表示，输出(T,E)维度的矩阵，E为encoder输出维度，最早是RNN结构，现在为conformer等attention base的结构&#x2F;</li><li>predictor基于之前的非blank标签预测下一个token的分布，输出(U+1,D)维度的矩阵。最早为LSTM等，后续替换为CNN乃至embedding。</li><li>joiner 组合两边的输出得到(T,U+1,V)其中L[t,u,v]代表token v在t时刻出现given y[0…u]。fusion方式为encoder predictor两边的输出expand后相加&#x2F;相乘&#x2F;拼接，后面又有一些双线性的fusion。<br>rnn-t的解码图如下：<br><img src="https://s2.loli.net/2022/06/30/4IlWAgayPXZqc3J.png" alt="decode graph"><br>我们用y代表离开这个node的概率，blank代表水平移动的概率<br><img src="https://s2.loli.net/2022/06/30/or47tnRgGOkYZSA.png"><br>α(t,u)代表看到x[0…t]输出y[0…u]的log输出，推理过程如下：<br><img src="https://s2.loli.net/2022/06/30/Bb5gYoLpvxc1eWH.png"><br>包括上一个t从u水平过来和从上一个token跳过来<br><img src="https://s2.loli.net/2022/06/30/bFtRO1g7Quz8r4X.png"><br>和CTC一样，rnn-t使用前向后向算法计算rnnt-loss<br><img src="https://s2.loli.net/2022/07/01/waR4UznFbPCyQeM.png" alt="rnnt-loss"></li></ul><h2 id="rnn-t研究方向"><a href="#rnn-t研究方向" class="headerlink" title="rnn-t研究方向"></a>rnn-t研究方向</h2><h3 id="领域迁移"><a href="#领域迁移" class="headerlink" title="领域迁移"></a>领域迁移</h3><h4 id="引入额外语言模型"><a href="#引入额外语言模型" class="headerlink" title="引入额外语言模型"></a>引入额外语言模型</h4><ul><li>shallow fusion<br>在beam search时引入外部语言模型，虽然后面又提出deep fusion，cold fusion，Simple Fusion and Component Fusion等方法，但是这些方法引入额外的计算代价和训练步骤，因此没有取代sf。<br><img src="https://s2.loli.net/2022/07/01/Ers2CXivb3acA8l.png" alt="sf">     </li><li>cold fusion<br><a href="https://arxiv.org/pdf/1503.03535.pdf">https://arxiv.org/pdf/1503.03535.pdf</a></li><li>ILME<br><a href="https://arxiv.org/abs/2011">https://arxiv.org/abs/2011</a>.</li></ul><h4 id="nn-bias"><a href="#nn-bias" class="headerlink" title="nn-bias"></a>nn-bias</h4><ul><li>Contextual RNN-T<br><a href="https://arxiv.org/abs/2006.03411">https://arxiv.org/abs/2006.03411</a></li></ul><h4 id="fintune"><a href="#fintune" class="headerlink" title="fintune"></a>fintune</h4><ul><li>finetune predictor<br><a href="https://arxiv.org/abs/2006.03411">https://arxiv.org/abs/2006.03411</a></li></ul><h3 id="predictor改进"><a href="#predictor改进" class="headerlink" title="predictor改进"></a>predictor改进</h3><p>越来越多的采用stateless的结构</p><ul><li>embedding predictor<br><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054419">https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054419</a></li><li>tied&amp;reduce decoder<br><a href="https://arxiv.org/pdf/2109.07513.pdf">https://arxiv.org/pdf/2109.07513.pdf</a></li></ul><h3 id="fusion改进"><a href="#fusion改进" class="headerlink" title="fusion改进"></a>fusion改进</h3><p>拼接相加乃至双线性，以及一些甚至放弃了全连接的结构</p><ul><li>bilinear<br><a href="https://arxiv.org/abs/2201.10240">https://arxiv.org/abs/2201.10240</a></li><li>Trivial joiner network<br><a href="https://arxiv.org/abs/2206.13236">https://arxiv.org/abs/2206.13236</a></li></ul><h3 id="effcient-training"><a href="#effcient-training" class="headerlink" title="effcient training"></a>effcient training</h3><p>RNN-T相比AED和CTC训练显存占用大，主要是由于最终输出一个(B,T,U,V)的四维矩阵并且在这上面做softmax，因此这方面的研究都围绕这个四维矩阵展开，从T上考虑，可以使用卷积做下采样降低T，从U上考虑，可以限制解码的范围，从V上考虑可以使用更小建模单元，从softmax上考虑可以function merge和减少softmax的参与元素。</p><ul><li>V上的优化<br> 音节建模 <a href="https://arxiv.org/abs/2101.06856">https://arxiv.org/abs/2101.06856</a></li><li>softmax上的优化<br>sampled softmax <a href="https://arxiv.org/abs/2203.16868">https://arxiv.org/abs/2203.16868</a><br>Function merging <a href="https://arxiv.org/abs/1909.12415">https://arxiv.org/abs/1909.12415</a></li><li>U上的优化<br>pruned rnnt <a href="https://arxiv.org/abs/2206.13236">https://arxiv.org/abs/2206.13236</a></li><li>T上的优化<br>subsampling <a href="https://arxiv.org/abs/1811.05097">https://arxiv.org/abs/1811.05097</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>论文总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>INTERNAL LANGUAGE MODEL ESTIMATION FOR DOMAIN-ADAPTIVE END-TO-END SPEECH RECOGNITION</title>
    <link href="/2022/07/01/ilme/"/>
    <url>/2022/07/01/ilme/</url>
    
    <content type="html"><![CDATA[<p>作者:Zhong Meng, Sarangarajan Parthasarathy, Eric Sun, Yashesh Gaur, Naoyuki Kanda, Liang Lu, Xie Chen, Rui Zhao, Jinyu Li, Yifan Gong<br>机构:  Microsoft Corporation, Redmond, WA, USA arXiv:2011.01991v1<br>链接:   <a href="https://arxiv.org/abs/2011.01991">https://arxiv.org/abs/2011.01991</a>      </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>通过引入外部语言模型来实现adapt，提出一个不限制e2e模型的集成外部语言模型方式</p><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><h4 id="Shallow-Fusion"><a href="#Shallow-Fusion" class="headerlink" title="Shallow Fusion"></a>Shallow Fusion</h4><p>在beam search时引入外部语言模型，虽然后面又提出deep fusion，cold fusion，Simple Fusion and Component Fusion等方法，但是这些方法引入额外的计算代价和训练步骤，因此没有取代sf。<br><img src="https://s2.loli.net/2022/07/01/Ers2CXivb3acA8l.png" alt="sf">       </p><h4 id="Density-Ratio-Method-In"><a href="#Density-Ratio-Method-In" class="headerlink" title="Density Ratio Method In"></a>Density Ratio Method In</h4><p>类似于hybrid模型，将e2e的后验按照声学和语言分解<br><img src="https://s2.loli.net/2022/07/01/YVfHzTXE6NvjCak.png" alt="source"><br><img src="https://s2.loli.net/2022/07/01/HAC9qIuBLrc6XJp.png" alt="target"><br>我们认为声学部分两边是一样的，就得到下面的式子：<br><img src="https://s2.loli.net/2022/07/01/aguEGKbXBJItfOW.png" alt="ratio"><br>x部分在given x的情况下对所有y不变，所以只需要考虑y部分，y部分实际是两个domain语言模型后验的比值，于是我们得出西面的fusion方式。<br><img src="https://s2.loli.net/2022/07/01/HNcb6vUMVKZCnfp.png" alt="image.png"><br>注意语言模型单独训练和e2e系统是两个模型。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h4><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
      <tag>lm</tag>
      
      <tag>domain adapt</tag>
      
      <tag>aed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>INTERNAL LANGUAGE MODEL ESTIMATION FOR DOMAIN-ADAPTIVE END-TO-END SPEECH RECOGNITION</title>
    <link href="/2022/07/01/majiang/"/>
    <url>/2022/07/01/majiang/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
      <tag>lm</tag>
      
      <tag>domain adapt</tag>
      
      <tag>aed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Memory-Efficient Training of RNN-Transducer with Sampled Softmax</title>
    <link href="/2022/07/01/rnnt-0701/"/>
    <url>/2022/07/01/rnnt-0701/</url>
    
    <content type="html"><![CDATA[<p>作者：Jaesong Lee1∗, Lukas Lee1∗, Shinji Watanabe<br>关键词：RNN-T softmax </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>RNN-T训练由于最后的输出是TxUxV的矩阵并且要过softmax这就导致这个矩阵的所有变量及其梯度都要存储，导致大量的显存占用。之前的一些方法会采用降低最后的矩阵的尺度来降低显存的占用比如使用sylable降低V，通过降采样降低T来减少显存的占用。还有一些降低padding，预训练的策略来加速rnn-t的训练。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li>sampled softmax降低训练的显存占用<br><img src="https://s2.loli.net/2022/07/01/m4EMR9uNVkUyFpq.png"><br>只包括对齐中需要的字的后验<br>Vneg源自对剩下字的采样<br><img src="https://s2.loli.net/2022/07/01/tRVawyj2AW1kfiI.png"></li></ol><p>这样的话最终计算对齐的矩阵就减小到了TxUxsmaple-V<br>但是如果采样的方式不合理会导致对部分字的后验估计错误导致解码出现不该出现的字。<br>2. 样本单独采样<br>一般的sample-softmax一个batch共用一组正负集合，这就使得在batch较大的时候，正集合变得很大，而负集合也必须跟着扩大，无法有效的降低显存。这里采用每个样本单独的正负集合来降低现存的占用，这样即使batch-size较大，两个集合也不会过大。<br>3. 利用ctc的头来协助采样<br>采样需要一个分布，如果按照平均分布肯定是不合理，我们肯定是希望让预测错误的部分进入loss来让模型学习正确的结果，但是如果每次都进行一次解码来得到后验就加大了显存的消耗，而作为正则的ctc与rnn-t的最终输出有相关性，所以我们就使用ctc的头的后验去除正字符后作为采样的分布使用。<br>4. CTC-constrained 解码<br>由于训练的时候的后验基于ctc的分布，所以解码时候我们也要引入ctc，否则会出现很多没有被正确建模概率的字，我们将ctc头的结果选出topk个字作为解码空间进行rnn-t的解码。    </p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="数据："><a href="#数据：" class="headerlink" title="数据："></a>数据：</h4><p>LibriSpeech、Aishell-1，CSJ<br>libriseech对比不同的建模单元数<br>aishell-1使用4231     </p><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p><img src="https://s2.loli.net/2022/07/01/3Sdkzw54O9Zifpb.png"><br><img src="https://s2.loli.net/2022/07/01/BTWOthFCHvpPsu2.png">     </p><p><img src="https://s2.loli.net/2022/07/01/fpZTOrU5EHn3bBw.png">  </p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnnt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PROGRESSIVE VOICE TRIGGER DETECTION Latency Control for Keyword Spotting</title>
    <link href="/2022/06/30/kws-0630/"/>
    <url>/2022/06/30/kws-0630/</url>
    
    <content type="html"><![CDATA[<p>作者: Christin Jose, Joseph Wang, Grant P. Strimel, Mohammad Omar Khursheed, Yuriy Mishchenko,<br>Brian Kulis<br>机构: Amazon Science, United States<br>关键词: kws,max-pooling<br>链接:  <a href="https://arxiv.org/pdf/2206.07261.pdf">https://arxiv.org/pdf/2206.07261.pdf</a>       </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>maxpooling不需要用对齐模型生成label，但是会导致额外的延迟，因为模型会倾向于多看一点下文再判断，而有时候我们需要灵活的控制延迟，像celoss我们就可以移动label来控制。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>原始的maxpooling loss 对于正样例选取正类别后验最高的一帧算loss，对于负样例则选取负类别后验最低的一帧算loss<br><img src="https://s2.loli.net/2022/06/30/F3aUJjMI4uRzBkm.png" alt="maxpooling.png"><br>本文在选取正样例的位置的时候加了一个前移的随机量，这个量服从伯努利分布，通过控制分布中为1的概率参数，来控制前移的幅度。<br><img src="https://s2.loli.net/2022/06/30/Nf8Hl96Ja4wgztE.png" alt="maxpooling2.png"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h4><p>cnn网络，64维 Mel-filterbank energy (LFBE) features<br><img src="https://s2.loli.net/2022/06/30/Xv6K58AUHR3CGak.png" alt="cnn.png"></p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p>准确度上b越大效果越差，0.1,0.2下和celoss性能相当<br><img src="https://s2.loli.net/2022/06/30/LkxMH2tpiXzvQ6c.png" alt="res1.png"><br>对时延的影响也符合预期<br><img src="https://s2.loli.net/2022/06/30/McBSfbCE1x8kaZ5.png" alt="res2.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>复现简单，解决实际问题。</p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kws</tag>
      
      <tag>maxpooling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pruned RNN-T for fast, memory-efficient ASR training</title>
    <link href="/2022/06/30/puned-rnnt/"/>
    <url>/2022/06/30/puned-rnnt/</url>
    
    <content type="html"><![CDATA[<p>作者:  Fangjun Kuang, Liyong Guo, Wei Kang,Long Lin, Mingshuang Luo, Zengwei Yao, Daniel Povey Xiaomi<br>机构:  Xiaomi Corp., Beijing, China<br>关键词: RNN-T, memory-efficient<br>链接:  <a href="https://arxiv.org/abs/2206.13236">https://arxiv.org/abs/2206.13236</a>       </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>RNN-T 输出一个四维的矩阵(N,T,U,V)，N为batch size，T为时间，U为序列长度，V为词典大小，V很大的情况下，训练显存占用太大了，之前有很多减少显存占用的工作，比如去除padding，在logits上计算梯度，本文提出一种方法，用S取代U，S&lt;&lt;U，从而降低内存占用。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>rnn-t三个部分：encoder，predictor，joint network  </p><ul><li>encdoer输出(T,E)维度的矩阵，E为encoder输出维度。</li><li>predictor基于之前的非blank标签预测下一个token的分布，输出(U+1,D)维度的矩阵</li><li>joiner 组合两边的输出得到(T,U+1,V)其中L[t,u,v]代表token v在t时刻出现given y[0…u]<br>rnn-t的解码图如下：<br><img src="https://s2.loli.net/2022/06/30/4IlWAgayPXZqc3J.png" alt="decode graph"><br>我们用y代表离开这个node的概率，blank代表水平移动的概率<br><img src="https://s2.loli.net/2022/06/30/or47tnRgGOkYZSA.png"><br>α(t,u)代表看到x[0…t]输出y[0…u]的log输出，推理过程如下：<br><img src="https://s2.loli.net/2022/06/30/Bb5gYoLpvxc1eWH.png"><br>包括上一个t从u水平过来和从上一个token跳过来<br><img src="https://s2.loli.net/2022/06/30/bFtRO1g7Quz8r4X.png"><br>最终RNN-T的输出是(NTUV)和ctc和aed模型的(NTV)&#x2F;(NUV)他的消耗大得多。<br><img src="https://s2.loli.net/2022/06/30/hvYzo78GLUNkrQK.png"><br>而实际上大部分梯度接近0，中间部分的梯度比较明显，可以看到训练后模型梯度非常集中，有点类似对齐的感觉。</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="Trivial-joiner-network"><a href="#Trivial-joiner-network" class="headerlink" title="Trivial joiner network"></a>Trivial joiner network</h4><p>避免引入一个很大线性层<br><img src="https://s2.loli.net/2022/06/30/cKFPTlHtoWOZwyq.png"></p><h4 id="Pruning-bounds"><a href="#Pruning-bounds" class="headerlink" title="Pruning bounds"></a>Pruning bounds</h4><p>引入常量S，只在S范围内计算loss，S之外的部分置为负无穷。这就需要我们找到一个S的边界，使得这个边界内的后验是最大的，本文提出一种估计方法，来估计S的起始位置。<br>设S&#x3D;4，起始为2，那么估计为<br><img src="https://s2.loli.net/2022/06/30/bGyI5fmTt762EBq.png"><br>我们需要找到其中最大的起始位置：<br><img src="https://s2.loli.net/2022/06/30/HegPh1UVbO72E6Q.png"><br>孤立着看很难理解，但是如果连续看T就能理解了。<br>为了裁剪的合理，进一步约束了起始点的位置，不能倒退，不能一步超过S。<br><img src="https://s2.loli.net/2022/06/30/DCIU6Ac4ouvWwHj.png"></p><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p><img src="https://s2.loli.net/2022/06/30/YoK7lCyx1PzhdVL.png"><br><img src="https://s2.loli.net/2022/06/30/cqprab2XtOSzHNo.png"><br><img src="https://s2.loli.net/2022/06/30/G9TIZL2eXHjvScE.png"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p>比较了性能和训练效率两个方面。<br><img src="https://s2.loli.net/2022/06/30/wg7Z3etybuCPlin.png"><br><img src="https://s2.loli.net/2022/06/30/exbscahmIDEiRwT.png"><br><img src="https://s2.loli.net/2022/06/30/HFul9zKdeqQjWN1.png">   </p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Improving CTC-based ASR Models with Gated Interlayer Collaboration</title>
    <link href="/2022/06/30/ctc-0630/"/>
    <url>/2022/06/30/ctc-0630/</url>
    
    <content type="html"><![CDATA[<p>作者：Yuting Yang, Yuke Li, Binbin Du<br>机构：网易<br>关键词：CTC、流式、文本融合           </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>ctc的独立性假设不合理，无法在模型前向中利用到文本信息</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>encoder使用conformer<br>提出一种融合方法gated interlayer collaboration （GIC）<br>首先将隐状态过一个线性层映射到字典维度得到后验，之后过embedding得到textual feature     </p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653620245806/9-pCZOsHA.png"></p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653620256457/qabF0GuNs.png"></p><p>通过门控的方式融合两个模态</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653620298741/K8ecK9ker.png"></p><p>最终loss是原本的ctcloss加上所有的中间CTC的平均值</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653620353727/4jlpuJez_.png"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h4><ul><li>实验数据<br>aishell-1 数据堂</li></ul><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653627039503/eTfIiAjja.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实跟<br><a href="https://arxiv.org/pdf/2104.02724.pdf">Relaxing the Conditional Independence Assumption of CTC-based ASR<br>by Conditioning on Intermediate Predictions</a><br>相比就是加了一个embedding和加权相加</p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctc</tag>
      
      <tag>asr</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
