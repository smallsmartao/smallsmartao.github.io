<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LEARNING A DUAL-MODE SPEECH RECOGNITION MODEL VIA SELF-PRUNING</title>
    <link href="/2022/09/08/dual-mode-9-8/"/>
    <url>/2022/09/08/dual-mode-9-8/</url>
    
    <content type="html"><![CDATA[<p>作者:  Chunxi Liu, Yuan Shangguan, Haichuan Yang, Yangyang Shi, Raghuraman Krishnamoorthi, Ozlem Kalinli<br>机构:     Meta AI<br>关键词: RNN-T，Dual-mode, pre-train<br>链接:         <a href="https://arxiv.org/pdf/2207.11906.pdf">https://arxiv.org/pdf/2207.11906.pdf</a></p><h3 id="动机">动机</h3><p>asr模型在端侧部署和服务器部署有着不同的模型要求，在端侧我们需要流式小模型在服务器端我们往往是非流式大模型，分别训练的代价比较大，而且模型大小的控制也需要对结构进行调参。本文提出一种在一个supernet上同时训练两个场景模型的方法。</p><h3 id="方法">方法</h3><h4 id="Emformer-encoder">Emformer encoder</h4><p>将语音输入划分成chunk，中间chunk和前后的chunk一起作为一个声学chunk送入encoder。这样就可以通过前后chunk的大小来控制时延。在训练的时候，采用类似wenet那种dynamic chunk，每个step我们在目标时延和整句长度两者之间采样一个chunk size，（要么整句要么chunk）用这个chunk生成的mask去训练模型。</p><h4 id="Dual-mode-ASR-supernet-training">Dual-mode ASR supernet training</h4><p>我们用f(x; θ )表示离线的大模型，用f(x; m ·θ )表示小模型，其中m为权重的mask，对应大模型中每个元素，决定是否将一些位置的权重置零。本文通过m对模型进行layer wise的剪枝，给定稀疏度s，最终每层会有s比例的权重被剪枝掉。具体训练和剪枝的步骤如下：</p><ol><li>首先训练整个supernet达到t0步，训练过程中随机采样流式和非流式。</li><li>从t0步开始：<ol><li>对于每一层每过T步就将P比例的幅度小的权重通过mask置零。</li><li>每一步训练，mask只对流式mode生效，对非流式模型不采用mask。</li></ol></li><li>经过n个T后，(1-p)n的权重被置零，当置零的权重满足稀疏指标时，就停止剪枝继续训练。</li></ol><h4 id="SELF-PRUNING-VIA-SELF-SUPERVISED-LEARNING">SELF-PRUNING VIA SELF-SUPERVISED LEARNING</h4><p>使用wav2vec2.0做预训练，训练时既使用非流式encoder也使用流式encoder，并且在预训练时只训练encoder不进行剪枝。finetune时使用小学习率并加入decoder，进行剪枝。</p><h3 id="实验">实验</h3><h4 id="实验设置">实验设置</h4><p>有监督训练使用librispeech，无监督训练使用Libri-Light。decoder为一层LSTM。<br>80维Fbank拼6帧。<br>流式chunk维分别为(20,3,1),非流式则采用36s，也就是整句。<br>具体参数量和剪枝参数如下：<br><img src="https://s2.loli.net/2022/09/08/OoHx64CFdI2arqR.png" alt=""><br><img src="https://s2.loli.net/2022/09/08/U5w9vlTs1bWtLR8.png" alt=""></p><h4 id="实验结果">实验结果</h4><p>首先是dual-mode模型与单mode模型的性能对比：<br><img src="https://s2.loli.net/2022/09/08/5KZfUeqlObBawCn.png" alt=""><br>可以看到相比单独streaming模型，dual-mode的训练方式再streaming上效果更好，说明离线的训练会帮助流式的模型。<br>除此之外通过C1，C2，D1的对比可以看出dual-mode的训练对streaming是正向作用对非流式是负向作用，为了缓解这个情况，将剪枝开始前的步数提高，并且剪枝前只用非流式的模型训练，在开始剪枝后才开始dual-mode训练。<br>之后是预训练对系统的影响。<br><img src="https://s2.loli.net/2022/09/08/KtCnFqOpgMcumeS.png" alt=""><br>可以看到非流式的wav2vec取得了最大的提升。<br>最后是weight decay的实验结果<br><img src="https://s2.loli.net/2022/09/08/AWCbch3rBVJzStp.png" alt=""></p><h3 id="总结">总结</h3><p>本文证明了dual-mode训练方法相比单独流式的优越性，并且将wav2vec应用到了流式模型中。</p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
      <tag>unified model</tag>
      
      <tag>dual-mode</tag>
      
      <tag>pretrain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctc的尖峰和滞后现象</title>
    <link href="/2022/08/11/ctc-peak/"/>
    <url>/2022/08/11/ctc-peak/</url>
    
    <content type="html"><![CDATA[<p>ctc训练出的对齐并不是真正的对齐，首先，他无法反映一个音素的持续时间，其次他尖峰的位置相对真实的音素位置是滞后的。</p><h3 id="尖峰"><a href="#尖峰" class="headerlink" title="尖峰"></a>尖峰</h3><p>使用kaldi中的对齐模型，我们能够得到一个音素的持续时间，但是CTC就无法得到。这是由于CTC loss的原因。对于CTC-loss来说blank可以看作是正确label后验的延续，具体怎么理解可以看下面的例子。<br>对于一个音素a持续三帧，下面表示两种预测方式的代价。<br><img src="https://s2.loli.net/2022/09/16/DMLUdnsPXaguYw6.png"><br>对于ctc来说，正确的label包括aaa,-a-,–a,aa-,-aa,aaa.<br>两个矩阵计算这些组合的概率的得分是一样的都是0.745.<br>但是加入这几个序列是b的三帧，那么正确的label包括bbb,-b-,–b,bb-,bbb,-bb.<br>对与高峰法对应的分数为0.000006而对于尖峰法则是0.008461，可以看到后者的分数更高。<br>也就是说尖峰的表现会在错误的情况下产生更好的损失，在正确时和高原相当。可以看到在ctc中blank有点像川麻里的癞子，可以看成对正确label的延续，而ctcloss计算时实际计算的就是正确结果的所有对齐，所以增大blank的帧数是由于ctc-loss的优化导致的。<br>而高原法，也就是kaldi中的对齐，基于HMM的跳转和自环就和blank不同，自环和跳到下一个状态都有各自的代价，因此不会出现尖峰。</p><h3 id="滞后"><a href="#滞后" class="headerlink" title="滞后"></a>滞后</h3><p>加入我们不关系音素的持续时间只关心音素什么时候出现，这种情况也不能用ctc做对齐，因为ctc有滞后效应。<br><img src="https://s2.loli.net/2022/09/16/VoDJhuBTMPwSWjl.png"><br>图中虚线是DNN得到的高原对齐结果，可以看到ctc的尖峰并不出现在一个音素的中心，而是在他结束的时候才出现。这是因为CTCloss完全不对尖峰的位置做约束，只关心整体的对齐最优，这就会导致网络可能会倾向于在音素加上一定后文之后再出现尖峰，就像用max-pooling训练kws模型也会出现延迟一样，网络会倾向信息最多的时候产生max的后验。同样的如果使用完全非流式的encoder，ctc能够看到未来信息那么就不存在延迟的问题。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>对于CTC的滞后其实一直是一个研究的重点，一个直观的思路就是利用DNN的高原结果来限制CTC的对齐路径。</p><p>除此之外，还有一些基于蒸馏的方法，让非流式模型作为老师，流式作为学生，或者是当前帧向未来帧蒸馏。</p><p>还就是在loss上做文章比如rnnt中的fast-emit还有k2的延迟惩罚loss。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctc</tag>
      
      <tag>asr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>beam search总结</title>
    <link href="/2022/08/10/beamsearch/"/>
    <url>/2022/08/10/beamsearch/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>beam search是asr中最重要的解码算法，但是原始的beam search 其实是无法满足asr的解码需求的，不管是ctc，aed还是rnnt。都需要对beam search进行优化，来完成解码任务，这里总结下不同模型&#x2F;工具包对beam search做的一些优化。</p><h2 id="beam-search"><a href="#beam-search" class="headerlink" title="beam search"></a>beam search</h2><p>beam search的逻辑其实很简单，首先设定波束大小B，B&lt;&lt; V，起始时，从起始点<code>\&lt;sos\&gt;</code>开始选取得分最高的B个节点，将这B个节点作为下一步的起始节点，之后从B个起始节点中，每个节点继续搜出B个得分最高的节点，这样得到BxB个节点，然后从BxB中选取B个得分最高的作为下一步的起始点，重复这个过程，直到搜出来的所有的B个起始点全部为<code>\&lt;eos\&gt;</code>.<br>这个算法应用到ASR解码上，首先需要优化的是效率，很显然从B扩展到BxB这个过程，B个节点的搜索是可以同时进行的，因此可以进行并行计算。<br>其次对于ctc、rnnt这种带blank的模型，不同的序列可能会产生一样的序列，为了避免解码空间的缩小，一般要在解码时候合并相同的路径，下面结合wenet的代码分别介绍在不同模型中的beamsearch。</p><h2 id="AED"><a href="#AED" class="headerlink" title="AED"></a>AED</h2><h3 id="decoder上的beamsearch"><a href="#decoder上的beamsearch" class="headerlink" title="decoder上的beamsearch"></a>decoder上的beamsearch</h3><p>attention机制的encoder-decoder模型的decoder为自回归结构，推理时先输入&lt;sos&gt;标记，得到输出后，将输出和之前的输入拼一起继续送入decoder，重复这个过程。这个过程基本就是经典的beam search，但是为了提高效率，需要并行计算，将B个节点延展成BxB的计算并行进行，具体到代码上就是前向时需要多一个维度，并且需要一个还原的过程，需要将不同句子的不同beam还原回去，知道每个计算是哪个节点的哪个beam的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">running_size = batch_size * beam_size<br>encoder_out = encoder_out.unsqueeze(<span class="hljs-number">1</span>).repeat(<span class="hljs-number">1</span>, beam_size, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>).view(<br>    running_size, maxlen, encoder_dim)  <span class="hljs-comment"># (B*N, maxlen, encoder_dim)</span><br>encoder_mask = encoder_mask.unsqueeze(<span class="hljs-number">1</span>).repeat(<br>    <span class="hljs-number">1</span>, beam_size, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>).view(running_size, <span class="hljs-number">1</span>,<br>                             maxlen)  <span class="hljs-comment"># (B*N, 1, max_len)</span><br><br>hyps = torch.ones([running_size, <span class="hljs-number">1</span>], dtype=torch.long,<br>                  device=device).fill_(self.sos)  <span class="hljs-comment"># (B*N, 1)</span><br>scores = torch.tensor([<span class="hljs-number">0.0</span>] + [-<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)] * (beam_size - <span class="hljs-number">1</span>),<br>                      dtype=torch.<span class="hljs-built_in">float</span>)<br>scores = scores.to(device).repeat([batch_size]).unsqueeze(<span class="hljs-number">1</span>).to(<br>    device)  <span class="hljs-comment"># (B*N, 1)</span><br>end_flag = torch.zeros_like(scores, dtype=torch.<span class="hljs-built_in">bool</span>, device=device)<br>cache: <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[torch.Tensor]] = <span class="hljs-literal">None</span><br><span class="hljs-comment"># 2. Decoder forward step by step</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, maxlen + <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># Stop if all batch and all beam produce eos</span><br>    <span class="hljs-keyword">if</span> end_flag.<span class="hljs-built_in">sum</span>() == running_size:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 2.1 Forward decoder step</span><br>    hyps_mask = subsequent_mask(i).unsqueeze(<span class="hljs-number">0</span>).repeat(<br>        running_size, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>).to(device)  <span class="hljs-comment"># (B*N, i, i)</span><br>    <span class="hljs-comment"># logp: (B*N, vocab)</span><br>    logp, cache = self.decoder.forward_one_step(<br>        encoder_out, encoder_mask, hyps, hyps_mask, cache)<br>    <span class="hljs-comment"># 2.2 First beam prune: select topk best prob at current time</span><br>    top_k_logp, top_k_index = logp.topk(beam_size)  <span class="hljs-comment"># (B*N, N)</span><br>    top_k_logp = mask_finished_scores(top_k_logp, end_flag)<br>    top_k_index = mask_finished_preds(top_k_index, end_flag, self.eos)<br>    <span class="hljs-comment"># 2.3 Second beam prune: select topk score with history</span><br>    scores = scores + top_k_logp  <span class="hljs-comment"># (B*N, N), broadcast add</span><br>    scores = scores.view(batch_size, beam_size * beam_size)  <span class="hljs-comment"># (B, N*N)</span><br>    scores, offset_k_index = scores.topk(k=beam_size)  <span class="hljs-comment"># (B, N)</span><br>    scores = scores.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># (B*N, 1)</span><br></code></pre></td></tr></table></figure><p>上面这个代码为并行部分，其中B为batch_size N为beam大小，V为字典大小。在送入decoder的时候，我们是送入了BxN个输入，得到了(BxN,V)的输出，我们先对这个结果做topk取出概率最大的N个结果(BxN,N)，之后将之前路径的分数加到每个结果的分数上原本分数scores为之前N个节点的分数(BxN,1)，每个结果的分数为(BxN,N),这里对应关系没有变，socre的1会广播到N上，也就是对应起始节点的分数会加到这个节点扩展的N个结果上。对加后的结果取topk，得到NxN中最高的N个最后回到(BxN,1)，这里就没有了起始节点和延展节点的对应关系。这样就并行完成了beam search的计算部分，但是这里的(BxN,1)你并不知道每个结果属于哪个起始节点，因此接下来需要用中间的信息还原出解码路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">base_k_index = torch.arange(batch_size, device=device).view(<br>    -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).repeat([<span class="hljs-number">1</span>, beam_size])  <span class="hljs-comment"># (B, N)</span><br>base_k_index = base_k_index * beam_size * beam_size<br>best_k_index = base_k_index.view(-<span class="hljs-number">1</span>) + offset_k_index.view(<br>    -<span class="hljs-number">1</span>)  <span class="hljs-comment"># (B*N)</span><br><br><span class="hljs-comment"># 2.5 Update best hyps</span><br>best_k_pred = torch.index_select(top_k_index.view(-<span class="hljs-number">1</span>),<br>                                 dim=-<span class="hljs-number">1</span>,<br>                                 index=best_k_index)  <span class="hljs-comment"># (B*N)</span><br>best_hyps_index = best_k_index // beam_size<br>last_best_k_hyps = torch.index_select(<br>    hyps, dim=<span class="hljs-number">0</span>, index=best_hyps_index)  <span class="hljs-comment"># (B*N, i)</span><br>hyps = torch.cat((last_best_k_hyps, best_k_pred.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)),<br>                 dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># (B*N, i+1)</span><br><br><span class="hljs-comment"># 2.6 Update end flag</span><br>end_flag = torch.eq(hyps[:, -<span class="hljs-number">1</span>], self.eos).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>为了便于理解，我们将batch_size设为3.beam_size设为5，首先我们生成base_index得到下面的矩阵</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[ 0,  0,  0,  0,  0]</span>,<br><span class="hljs-string">[25, 25, 25, 25, 25]</span>,<br><span class="hljs-string">[50, 50, 50, 50, 50]</span>]<br></code></pre></td></tr></table></figure><p>这是因为每个utt在第一次计算后每个得到的解码空间为NxN，所以每个utt的起始为 i x N x N,而offset_k_index为之前第二次剪枝topk取出结果的index，当时在(B,NxN)的第二维取的，范围在[0,NxN)，两个相加就得到了，剪枝后失去对应关系的BxN个结果在原本BxNxN个结果中中的位置数值 [0，BxNxN)。<br>而topk_index为第一次剪枝topk的index，当时是在(BxN,V)的第二维取的，因此数值范围在[0,V)之间，对应建模单元(字&#x2F;syllabel)的id，维度为(BxN,N)。因此best_k_pred就还原出了了剪枝后剩下的N个节点的解码序列。而best_k_index &#x2F;&#x2F;beam_size 就能够得到结果对应的hyps是从哪个节点出来的，因为每个batch延展的解码空间为NxN，而一个节点延展的空间为N，因此除去一个N就得到了出发的节点。等于是在一个一维的向量维护一个二维矩阵，用&#x2F;&#x2F;，+等操作模拟寻址。之后用出发节点的index找一下对齐的结果处理一下，维护下一个step的出发节点。<br>wenet判断结束的逻辑是当前节点列表中是不是所有的节点都是&lt;eos&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, maxlen + <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># Stop if all batch and all beam produce eos</span><br>    <span class="hljs-keyword">if</span> end_flag.<span class="hljs-built_in">sum</span>() == running_size:<br>        <span class="hljs-keyword">break</span><br>    ...<br>    ...<br>    end_flag = torch.eq(hyps[:, -<span class="hljs-number">1</span>], self.eos).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="AED解码的改进"><a href="#AED解码的改进" class="headerlink" title="AED解码的改进"></a>AED解码的改进</h3><p>实际上，AED的缺点就在于这种解码方式，因为这种完全token级别的解码产生很多问题，首先就是这种解码没有一个显式的对齐，只有cross-attention的软对齐，这个缺点不仅导致了他无法应用到一些下游任务上，还导致他没法通过声学直接知道什么时候句子结束，所以AED将句子长度这个本质上的回归问题通过<eos>转化成了一个分类问题，这就导致AED可能出现过长或者过短的结果。其中过短的结果是由于提前出现了<eos>句子直接结束，在一些小声或者噪声场景，这种短句往往得分不低，从而产生了大量的删除错误，这种我们一般通过引入CTC这种注重对齐的模块来解决，或者计算croos-attention等反应对齐质量的分数来解决。 而过长的句子则来源于一直不出<eos>，这种对错误率影响不大因为这种长句子往往得分很低，但是在工程上这会影响beam search的效率，这里一般是一些工程优化为主，比如限制beam中最高得分和最低得分的差距之类的来裁剪这些结果。</p><h4 id="ctc"><a href="#ctc" class="headerlink" title="ctc"></a>ctc</h4><p>wenet和espnet最优的解码结果都引入了CTC，只是引入的方式不同。wenet的方式是attention 重打分，也就是decoder对ctc beam search的结果重新算个分数，然后这个分数和ctc的分数结合，来选择最优的结果，这个实际上跟decoder上的beam search无关了。而espnet则是在decoder做beam search的时候引入ctc的分数。这两种方法本质都是利用ctc强对齐的特性，来弥补decoder对对齐的忽视，避免过长和过短等不正常结果的出现。相比espnet，wenet对对齐的要求实际上是更严格的，不正常的对齐结果根本无法进入ctc的beam，但是这个也导致wenet的性能受限于ctc，decoder的表现被限制在ctc的beam内，不过CTC的beam search结果一般都包含了正确的结果，而且ctc的缺点在于上下文信息的利用，声学上建模能力较强，着重建模token级别上下文的decoder在ctc的beam上重打分本身是非常合适的。</p><h3 id="ctc-prefix-beam-search"><a href="#ctc-prefix-beam-search" class="headerlink" title="ctc prefix beam search"></a>ctc prefix beam search</h3><p>ctc和rnnt是一样的，因为blank的存在，所以需要对路径进行合并，合并后和合并前的比相同beam下搜索空间更大。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnnt</tag>
      
      <tag>aed</tag>
      
      <tag>beamsearch</tag>
      
      <tag>decode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bpe算法</title>
    <link href="/2022/08/09/bpe/"/>
    <url>/2022/08/09/bpe/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在librispeech做实验，发现很多开源模型的bpe设置差别特别大，有点好奇这个划分建模单元的原理，为什么可以按照要求随心所欲的设置建模单元，于是学习了一点bpe的原理，总结在这里。</p><h3 id="英文分词"><a href="#英文分词" class="headerlink" title="英文分词"></a>英文分词</h3><p>英文和中文不同，如果按词建模，词典就会过大，而且oov完全无法处理，按照字符划分虽然不会oov但是力度太细，不好训练，其次还有short， shorter这种比较级，还是不同时态的动词等情况需要合理进行划分。<br>于是现在流行基于subword的方法，将一个词划分为多个部分，这个部分介于整个单词和单个字符之间，这个方法能够取得粒度的平衡，并且能够学习到一些词缀的关系。而BPE就可以看成生成这个中间建模单元词表的算法。</p><h3 id="BPE"><a href="#BPE" class="headerlink" title="BPE"></a>BPE</h3><p>bpe算法步骤如下：   </p><ol><li>确定建模单元数目</li><li>给每个单词开头加一个_标记来记录开头，并统计出现的频率。例如出现五次的smart就记录为’_smart:5’</li><li>所有的单词拆分为字符作为最初的词表，统计每个建模单元的出现次数。</li><li>选出字典中出现频率最高的字符对，将新字符加入词表，然后重新统计词表建模单元的个数。注意如果t,h的频率最高，将th加入词表后，分别统计t,h时要减去th 的个数。</li><li>重复4操作，直到达到要求的建模单元数或者最高频率的字符对只出现了一次。</li></ol><p>bpe有个缺陷是一个句子可能有不同的token序列，但是对asr来说只要转换的方式固定就不存在问题。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FACTORIZED NEURAL TRANSDUCER FOR EFFICIENT LANGUAGE MODEL ADAPTATION</title>
    <link href="/2022/07/13/rnnt-0713/"/>
    <url>/2022/07/13/rnnt-0713/</url>
    
    <content type="html"><![CDATA[<p>作者:  Xie Chen, Zhong Meng, Sarangarajan Parthasarathy, Jinyu Li<br>机构: Microsoft Speech and Language Group<br>关键词: rnnt lm<br>链接:  <a href="https://arxiv.org/abs/2110.01500">https://arxiv.org/abs/2110.01500</a>       </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>e2e架构中没有单独的声学和语言建模，所以难以直接利用纯文本的数据完成领域迁移，在这方面有很多工作，但是都存在一些缺点：</p><ul><li>tts生成配对数据，但是这个方法计算量太大，而且不够灵活。</li><li>LM fusion 对fusion的系数很敏感，需要根据任务调整</li><li>用语言模型loss改进predictor或者内部语言模型<br>predictor虽然很多人把他视作语言模型，但是其实并非如此，之前也有很多论文说过这个结论，这篇论文也举例说明这个结论。<br><img src="https://s2.loli.net/2022/07/13/ZIBvgxoVJ695meQ.png" alt="image.png"><br>在预测A时他的作用类似语言模型，但是下一帧，他得到的声学模型其实和上一帧类似，预测的目标实际上变成了blank，这就说明predictor至少有两个任务一个是语言模型一个是对齐。</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>本文对rnnt结构改造，将precitor分成两个，一个负责预测blank一个负责预测token。<br><img src="https://s2.loli.net/2022/07/13/NYS37KF2ufW4OL8.png" alt="image.png"><br>具体的前向过程如下：<br><img src="https://s2.loli.net/2022/07/13/akJXOCt4eGb1x8d.png" alt="image.png"><br>原始的前向如下：<br><img src="https://s2.loli.net/2022/07/13/EVOqLCNg2s3MQly.png" alt="image.png"><br>loss变换为：<br><img src="https://s2.loli.net/2022/07/13/TA3gLSKYPUmoCrQ.png" alt="image.png"><br>第二部分为预测token的部分的语言模型loss<br>这个部分可以换成其他词典一样的语言模型，而且改进后的rnnt不需要和原本的rnnt一样在四维矩阵上计算，所以比较节省显存。</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>64k h 训练数据<br>两个测试集：</p><ul><li>librispeech 的train-960的训练抄本作为adapt数据，dev和test作为测试集合。</li><li>微软内部测试集</li></ul><h4 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h4><p>4000  sentence pieces<br>640 dim feature<br>encoder: 18 transformer layer<br>baseline: 84M<br>factorized Transducer: 103M</p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p>在通用测试集表现如下：<br><img src="https://s2.loli.net/2022/07/13/KnqhC6SgkwRN8uy.png" alt="image.png"><br>可以看到在通用测试集上随着系数增加 效果会变差，但是ppl会降低，也就是说虽然效果差了但是实际语言模型的效果是在提升的。<br>adpat的结果如下：<br><img src="https://s2.loli.net/2022/07/13/XtkmblRwNcQZOxF.png" alt="image.png"><br>相比sf提升明显。<br>随着adapt，在80k位置逐渐稳定。<br><img src="https://s2.loli.net/2022/07/13/XtkmblRwNcQZOxF.png" alt="image.png"><br>内部测试集结果<br><img src="https://s2.loli.net/2022/07/13/DncJ9CIqv1fxhFG.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnnt</tag>
      
      <tag>lm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nn-bias总结</title>
    <link href="/2022/07/09/nnbias/"/>
    <url>/2022/07/09/nnbias/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>端到端系统在落地的时候，我们需要加强对一些词的识别，这些词包括命名实体、地名、网络热词等等，但是对于一个上线的系统，我们不可能每次更换热词列表都扩充数据，重新<br>训练模型，所以就出现了很多bias的技术，之前主要是基于语言模型的各种fusion，包括shallow fusion和WFST插值和合并等，还有一种基于神经网络的bias方法，我们重点介绍这种方法。</p><h2 id="On-the-fly-Rescoring"><a href="#On-the-fly-Rescoring" class="headerlink" title="On-the-fly Rescoring"></a>On-the-fly Rescoring</h2><p><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/43816.pdf">https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/43816.pdf</a><br>这是一种基于WFST的方法，但是非常重要，现在很多热词系统就是基于这个方法。</p><h2 id="C-LAS"><a href="#C-LAS" class="headerlink" title="C-LAS"></a>C-LAS</h2><p><a href="https://arxiv.org/pdf/1808.02480.pdf">https://arxiv.org/pdf/1808.02480.pdf</a><br>Contextualized LAS 提出基于nn的bias方法，后面的很多方法都是基于这个方法的迁移，这篇论文也解释了很多nn-bias中的细节，以及这种方法的可解释性。</p><h3 id="bias-embedding"><a href="#bias-embedding" class="headerlink" title="bias embedding"></a>bias embedding</h3><p>首先需要提取热词的列表的embedding，将不同长度的热词都变成一个embedding的形式，本文采用一个LSTN，将最后一个状态作为embedding。<br><img src="https://s2.loli.net/2022/07/11/xzDmHAQXOiMIR42.png"> </p><h3 id="bias-attention"><a href="#bias-attention" class="headerlink" title="bias attention"></a>bias attention</h3><p>将embedding和encoder的h做attention，得到的结果和原本的拼接送入decoder。<br><img src="https://s2.loli.net/2022/07/11/MtxPOvu4N6sSgEG.png"> </p><h3 id="训练和推理"><a href="#训练和推理" class="headerlink" title="训练和推理"></a>训练和推理</h3><p>训练时随机选取热词，用一个概率控制一个batch内句子被选取热词的概率，同时对于带热词的句子在热词部分插入一个标记，来帮助bias部分的梯度更新。比如之前是“你看哔哩哔哩<bias>的哪个视频没”，热词为哔哩哔哩，那么就改写为“你看哔哩哔哩<bias>的那个视频没”。<br>推理时可以预先根据热词生成好bias_embedding，然后只需要额外做attention的计算。</bias></bias></p><h3 id="bias-condition"><a href="#bias-condition" class="headerlink" title="bias condition"></a>bias condition</h3><p>维护热词前缀的列表，只有对齐出现了前缀的时候才激活对应热词的embedding。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p><img src="https://s2.loli.net/2022/07/12/ZGTRy5Cp1FNsxia.png"></p><h4 id="非热词场景"><a href="#非热词场景" class="headerlink" title="非热词场景"></a>非热词场景</h4><p><img src="https://s2.loli.net/2022/07/12/ZGTRy5Cp1FNsxia.png"></p><h4 id="对比结果"><a href="#对比结果" class="headerlink" title="对比结果"></a>对比结果</h4><p><img src="https://s2.loli.net/2022/07/12/MiKsmbSuGr9qowY.png"></p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><p><img src="https://s2.loli.net/2022/07/12/h7x6vLWcVCKD2pT.png"></p><h2 id="Context-transformer-transducer"><a href="#Context-transformer-transducer" class="headerlink" title="Context transformer transducer"></a>Context transformer transducer</h2><p><a href="https://arxiv.org/abs/2006.03411">https://arxiv.org/abs/2006.03411</a><br>将bias做到encoder和decoder，也是基于attention的bias<br><img src="https://s2.loli.net/2022/07/12/mJshDSNfOtqXZnB.png"><br><img src="https://s2.loli.net/2022/07/12/Sx6YZWVrUbO3ImP.png"></p><h2 id="Contextual-Transformer"><a href="#Contextual-Transformer" class="headerlink" title="Contextual Transformer"></a>Contextual Transformer</h2><p>在decoder上做bias<br><img src="https://s2.loli.net/2022/07/12/SwKtzQYr1DikyU7.png"><br><img src="https://s2.loli.net/2022/07/12/aQtCbFMADlWqek4.png"></p><h2 id="一些细节和改进"><a href="#一些细节和改进" class="headerlink" title="一些细节和改进"></a>一些细节和改进</h2><h3 id="热词列表"><a href="#热词列表" class="headerlink" title="热词列表"></a>热词列表</h3><p>维护一个动态的热词池，刚开始retrain的时候热词比例高，随着训练热词比例逐渐降低。</p><h3 id="整体编码"><a href="#整体编码" class="headerlink" title="整体编码"></a>整体编码</h3><p>对热词列表坐一个整体的变换，让模型学习热词间的相关性</p><h3 id="纯化"><a href="#纯化" class="headerlink" title="纯化"></a>纯化</h3><p>推理的时候对attention分数做排序，保留topk的分数将剩下的分数设为0，重新归一化热词概率。<br><img src="https://s2.loli.net/2022/07/12/yr1DeJonLaiBHVb.png"></p><h3 id="代码细节"><a href="#代码细节" class="headerlink" title="代码细节"></a>代码细节</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextBias</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        input_size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        output_size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        vocab_size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        embedding_size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        num_layers: <span class="hljs-built_in">int</span> = <span class="hljs-number">2</span>,</span><br><span class="hljs-params">        attention_heads: <span class="hljs-built_in">int</span> = <span class="hljs-number">4</span>,</span><br><span class="hljs-params">        linear_units: <span class="hljs-built_in">int</span> = <span class="hljs-number">512</span>,</span><br><span class="hljs-params">        num_block: <span class="hljs-built_in">int</span> = <span class="hljs-number">4</span>,</span><br><span class="hljs-params">        dropout_rate: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.0</span>,</span><br><span class="hljs-params">        bias_encoder_type: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;linear&quot;</span>,</span><br><span class="hljs-params">        bias_encoder: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span><br><span class="hljs-params">    </span>):<br>        <span class="hljs-keyword">assert</span> check_argument_types()<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.input_size = input_size<br>        self.output_size = output_size<br>        self.embedding_size = embedding_size<br>        self.num_layers = num_layers<br>        self.vocab_size = vocab_size<br>        self.attention_heads = attention_heads<br>        self.linear_units = linear_units<br>        self.num_blocks = num_block<br>        self.dropout_rate = dropout_rate<br>        self.encoder_type = bias_encoder_type<br>        self.if_bias_encoder = bias_encoder<br>        self.context_extractor = BLSTM(<br>            self.vocab_size, self.embedding_size, self.num_layers)<br>          self.context_encoder = torch.nn.Sequential(torch.nn.Linear(self.embedding_size * <span class="hljs-number">4</span>,self.embedding_size),torch.nn.LayerNorm(self.embedding_size))<br>          self.encoder_bias = MultiHeadedAttention(<br>              n_head=self.attention_heads,<br>              n_feat=self.embedding_size,<br>              dropout_rate=<span class="hljs-number">0.0</span><br>          )<br>        self.encoder_norm = torch.nn.LayerNorm(self.embedding_size)<br>        self.encoder_bias_norm = torch.nn.LayerNorm(self.embedding_size)<br></code></pre></td></tr></table></figure><p>模型前向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forword_common</span>(<span class="hljs-params">self, context_list, context_lengths, h_enc</span>):<br>    bias_vector = self.context_extractor(context_list,context_lengths)<br>    bias_lengths = torch.tensor([bias_vector.shape[<span class="hljs-number">0</span>]],dtype=torch.int32,device=bias_vector.device)<br>    <span class="hljs-keyword">if</span> self.encoder_type == <span class="hljs-string">&#x27;transformer&#x27;</span>:<br>        bias_hidden, bias_mask = self.context_encoder(<br>            bias_vector.unsqueeze(<span class="hljs-number">0</span>),bias_lengths<br>        )<br>    <span class="hljs-keyword">elif</span> self.encoder_type == <span class="hljs-string">&#x27;linear&#x27;</span>:<br>        bias_hidden = self.context_encoder(bias_vector.unsqueeze(<span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">elif</span> self.encoder_type == <span class="hljs-string">&#x27;mytransformer&#x27;</span>:<br>        bias_hidden, ilens, bias_mask = self.context_encoder(<br>            bias_vector.unsqueeze(<span class="hljs-number">0</span>),bias_lengths<br>        )<br>    bias_hidden = bias_hidden.expand(h_enc.shape[<span class="hljs-number">0</span>],-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> bias_hidden<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_encoder</span>(<span class="hljs-params">self, bias_hidden, h_enc</span>):<br>    <span class="hljs-keyword">if</span> self.encoder_type == <span class="hljs-string">&#x27;mytransformer&#x27;</span>:<br>        h_enc_bias = self.encoder_bias(h_enc, bias_hidden, bias_hidden)<br>    <span class="hljs-keyword">else</span>:<br>        h_enc_bias,_ = self.encoder_bias(h_enc, bias_hidden, bias_hidden)<br>    encoder_norm_out = self.encoder_norm(h_enc)<br>    encoder_bias_norm_out = self.encoder_bias_norm(h_enc_bias)<br>    h_enc_concat = torch.cat(<br>        [encoder_norm_out, encoder_bias_norm_out],dim=-<span class="hljs-number">1</span><br>    )<br>    <br>    <span class="hljs-keyword">return</span> h_enc + self.encoder_ffn(h_enc_concat)<br><br></code></pre></td></tr></table></figure><p>decoder bias</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoderLayerContext</span>(nn.Module):<br>    <span class="hljs-string">&quot;&quot;&quot;Single decoder layer module.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        size (int): Input dimension.</span><br><span class="hljs-string">        self_attn (torch.nn.Module): Self-attention module instance.</span><br><span class="hljs-string">            `MultiHeadedAttention` instance can be used as the argument.</span><br><span class="hljs-string">        src_attn (torch.nn.Module): Inter-attention module instance.</span><br><span class="hljs-string">            `MultiHeadedAttention` instance can be used as the argument.</span><br><span class="hljs-string">        feed_forward (torch.nn.Module): Feed-forward module instance.</span><br><span class="hljs-string">            `PositionwiseFeedForward` instance can be used as the argument.</span><br><span class="hljs-string">        dropout_rate (float): Dropout rate.</span><br><span class="hljs-string">        normalize_before (bool):</span><br><span class="hljs-string">            True: use layer_norm before each sub-block.</span><br><span class="hljs-string">            False: to use layer_norm after each sub-block.</span><br><span class="hljs-string">        concat_after (bool): Whether to concat attention layer&#x27;s inpu</span><br><span class="hljs-string">            and output.</span><br><span class="hljs-string">            True: x -&gt; x + linear(concat(x, att(x)))</span><br><span class="hljs-string">            False: x -&gt; x + att(x)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        size: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">        self_attn: nn.Module,</span><br><span class="hljs-params">        src_attn: nn.Module,</span><br><span class="hljs-params">        bias_attn: nn.Module,</span><br><span class="hljs-params">        feed_forward: nn.Module,</span><br><span class="hljs-params">        dropout_rate: <span class="hljs-built_in">float</span>,</span><br><span class="hljs-params">        normalize_before: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,</span><br><span class="hljs-params">        concat_after: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">    </span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Construct an DecoderLayer object.&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.size = size<br>        self.self_attn = self_attn<br>        self.src_attn = src_attn<br>        self.bias_attn = bias_attn<br>        self.feed_forward = feed_forward<br>        self.linear = nn.Linear(<span class="hljs-number">2</span> * size,size)<br>        self.norm1 = nn.LayerNorm(size, eps=<span class="hljs-number">1e-5</span>)<br>        self.norm2 = nn.LayerNorm(size, eps=<span class="hljs-number">1e-5</span>)<br>        self.norm3 = nn.LayerNorm(size, eps=<span class="hljs-number">1e-5</span>)<br>        self.dropout = nn.Dropout(dropout_rate)<br>        self.normalize_before = normalize_before<br>        self.concat_after = concat_after<br>        <span class="hljs-keyword">if</span> self.concat_after:<br>            self.concat_linear1 = nn.Linear(size + size, size)<br>            self.concat_linear2 = nn.Linear(size + size, size)<br>        <span class="hljs-keyword">else</span>:<br>            self.concat_linear1 = nn.Identity()<br>            self.concat_linear2 = nn.Identity()<br>        self.if_bias = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        tgt: torch.Tensor,</span><br><span class="hljs-params">        tgt_mask: torch.Tensor,</span><br><span class="hljs-params">        memory: torch.Tensor,</span><br><span class="hljs-params">        memory_mask: torch.Tensor,</span><br><span class="hljs-params">        bias_hidden: torch.Tensor,</span><br><span class="hljs-params">        cache: <span class="hljs-type">Optional</span>[torch.Tensor] = <span class="hljs-literal">None</span></span><br><span class="hljs-params">    </span>) -&gt; <span class="hljs-type">Tuple</span>[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]:<br>        <span class="hljs-string">&quot;&quot;&quot;Compute decoded features.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            tgt (torch.Tensor): Input tensor (#batch, maxlen_out, size).</span><br><span class="hljs-string">            tgt_mask (torch.Tensor): Mask for input tensor</span><br><span class="hljs-string">                (#batch, maxlen_out).</span><br><span class="hljs-string">            memory (torch.Tensor): Encoded memory</span><br><span class="hljs-string">                (#batch, maxlen_in, size).</span><br><span class="hljs-string">            memory_mask (torch.Tensor): Encoded memory mask</span><br><span class="hljs-string">                (#batch, maxlen_in).</span><br><span class="hljs-string">            cache (torch.Tensor): cached tensors.</span><br><span class="hljs-string">                (#batch, maxlen_out - 1, size).</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            torch.Tensor: Output tensor (#batch, maxlen_out, size).</span><br><span class="hljs-string">            torch.Tensor: Mask for output tensor (#batch, maxlen_out).</span><br><span class="hljs-string">            torch.Tensor: Encoded memory (#batch, maxlen_in, size).</span><br><span class="hljs-string">            torch.Tensor: Encoded memory mask (#batch, maxlen_in).</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># import pdb;pdb.set_trace()</span><br>        residual = tgt<br>        tgt = self.norm1(tgt)<br><br>        <span class="hljs-keyword">if</span> cache <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            tgt_q = tgt<br>            tgt_q_mask = tgt_mask<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># compute only the last frame query keeping dim: max_time_out -&gt; 1</span><br>            <span class="hljs-keyword">assert</span> cache.shape == (<br>                tgt.shape[<span class="hljs-number">0</span>],<br>                tgt.shape[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>,<br>                self.size,<br>            ), <span class="hljs-string">&quot;&#123;cache.shape&#125; == &#123;(tgt.shape[0], tgt.shape[1] - 1, self.size)&#125;&quot;</span><br>            tgt_q = tgt[:, -<span class="hljs-number">1</span>:, :]<br>            residual = residual[:, -<span class="hljs-number">1</span>:, :]<br>            tgt_q_mask = tgt_mask[:, -<span class="hljs-number">1</span>:, :]<br><br>        <span class="hljs-keyword">if</span> self.concat_after:<br>            tgt_concat = torch.cat(<br>                (tgt_q, self.self_attn(tgt_q, tgt, tgt, tgt_q_mask)[<span class="hljs-number">0</span>]), dim=-<span class="hljs-number">1</span>)<br>            x = residual + self.concat_linear1(tgt_concat)<br>        <span class="hljs-keyword">else</span>:<br>            x = residual + self.dropout(<br>                self.self_attn(tgt_q, tgt, tgt, tgt_q_mask)[<span class="hljs-number">0</span>])<br>        residual = x<br>        x = self.norm2(x)<br>        <span class="hljs-keyword">if</span> self.concat_after:<br>            x_concat = torch.cat(<br>                (x, self.src_attn(x, memory, memory, memory_mask)[<span class="hljs-number">0</span>]), dim=-<span class="hljs-number">1</span>)<br>            x = residual + self.concat_linear2(x_concat)<br>        <span class="hljs-keyword">else</span>:<br>            x_ori = self.dropout(<br>                self.src_attn(x, memory, memory, memory_mask)[<span class="hljs-number">0</span>])<br>            x_bias = self.dropout(<br>                self.bias_attn(x, bias_hidden, bias_hidden, memory_mask)[<span class="hljs-number">0</span>])<br>            x = torch.cat([x_ori,x_bias], dim=-<span class="hljs-number">1</span>)<br>            x = self.linear(x)<br>        x = self.norm3(x)<br>        x = residual + self.dropout(self.feed_forward(x))<br>        <span class="hljs-keyword">if</span> cache <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            x = torch.cat([cache, x], dim=<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> x, tgt_mask, memory, memory_mask<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>论文总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
      <tag>bias</tag>
      
      <tag>hotword</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rnnt相关总结</title>
    <link href="/2022/07/01/rnnt-overview/"/>
    <url>/2022/07/01/rnnt-overview/</url>
    
    <content type="html"><![CDATA[<h2 id="rnn-t简介"><a href="#rnn-t简介" class="headerlink" title="rnn-t简介"></a>rnn-t简介</h2><p>rnn-t三个部分：encoder，predictor，joint network<br><img src="https://s2.loli.net/2022/07/01/lNZDCIOh5Woz1KY.png" alt="rnnt"></p><ul><li>encdoer 提取声学高维表示，输出(T,E)维度的矩阵，E为encoder输出维度，最早是RNN结构，现在为conformer等attention base的结构&#x2F;</li><li>predictor基于之前的非blank标签预测下一个token的分布，输出(U+1,D)维度的矩阵。最早为LSTM等，后续替换为CNN乃至embedding。</li><li>joiner 组合两边的输出得到(T,U+1,V)其中L[t,u,v]代表token v在t时刻出现given y[0…u]。fusion方式为encoder predictor两边的输出expand后相加&#x2F;相乘&#x2F;拼接，后面又有一些双线性的fusion。<br>rnn-t的解码图如下：<br><img src="https://s2.loli.net/2022/06/30/4IlWAgayPXZqc3J.png" alt="decode graph"><br>我们用y代表离开这个node的概率，blank代表水平移动的概率<br><img src="https://s2.loli.net/2022/06/30/or47tnRgGOkYZSA.png"><br>α(t,u)代表看到x[0…t]输出y[0…u]的log输出，推理过程如下：<br><img src="https://s2.loli.net/2022/06/30/Bb5gYoLpvxc1eWH.png"><br>包括上一个t从u水平过来和从上一个token跳过来<br><img src="https://s2.loli.net/2022/06/30/bFtRO1g7Quz8r4X.png"><br>和CTC一样，rnn-t使用前向后向算法计算rnnt-loss<br><img src="https://s2.loli.net/2022/07/01/waR4UznFbPCyQeM.png" alt="rnnt-loss"></li></ul><h2 id="rnn-t研究方向"><a href="#rnn-t研究方向" class="headerlink" title="rnn-t研究方向"></a>rnn-t研究方向</h2><h3 id="领域迁移"><a href="#领域迁移" class="headerlink" title="领域迁移"></a>领域迁移</h3><h4 id="引入额外语言模型"><a href="#引入额外语言模型" class="headerlink" title="引入额外语言模型"></a>引入额外语言模型</h4><ul><li>shallow fusion<br>在beam search时引入外部语言模型，虽然后面又提出deep fusion，cold fusion，Simple Fusion and Component Fusion等方法，但是这些方法引入额外的计算代价和训练步骤，因此没有取代sf。<br><img src="https://s2.loli.net/2022/07/01/Ers2CXivb3acA8l.png" alt="sf">     </li><li>cold fusion<br><a href="https://arxiv.org/pdf/1503.03535.pdf">https://arxiv.org/pdf/1503.03535.pdf</a></li><li>ILME<br><a href="https://arxiv.org/abs/2011">https://arxiv.org/abs/2011</a>.</li></ul><h4 id="nn-bias"><a href="#nn-bias" class="headerlink" title="nn-bias"></a>nn-bias</h4><ul><li>Contextual RNN-T<br><a href="https://arxiv.org/abs/2006.03411">https://arxiv.org/abs/2006.03411</a></li></ul><h4 id="fintune"><a href="#fintune" class="headerlink" title="fintune"></a>fintune</h4><ul><li>finetune predictor<br><a href="https://arxiv.org/abs/2006.03411">https://arxiv.org/abs/2006.03411</a></li></ul><h3 id="predictor改进"><a href="#predictor改进" class="headerlink" title="predictor改进"></a>predictor改进</h3><p>越来越多的采用stateless的结构</p><ul><li>embedding predictor<br><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054419">https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054419</a></li><li>tied&amp;reduce decoder<br><a href="https://arxiv.org/pdf/2109.07513.pdf">https://arxiv.org/pdf/2109.07513.pdf</a></li></ul><h3 id="fusion改进"><a href="#fusion改进" class="headerlink" title="fusion改进"></a>fusion改进</h3><p>拼接相加乃至双线性，以及一些甚至放弃了全连接的结构</p><ul><li>bilinear<br><a href="https://arxiv.org/abs/2201.10240">https://arxiv.org/abs/2201.10240</a></li><li>Trivial joiner network<br><a href="https://arxiv.org/abs/2206.13236">https://arxiv.org/abs/2206.13236</a></li></ul><h3 id="effcient-training"><a href="#effcient-training" class="headerlink" title="effcient training"></a>effcient training</h3><p>RNN-T相比AED和CTC训练显存占用大，主要是由于最终输出一个(B,T,U,V)的四维矩阵并且在这上面做softmax，因此这方面的研究都围绕这个四维矩阵展开，从T上考虑，可以使用卷积做下采样降低T，从U上考虑，可以限制解码的范围，从V上考虑可以使用更小建模单元，从softmax上考虑可以function merge和减少softmax的参与元素。</p><ul><li>V上的优化<br> 音节建模 <a href="https://arxiv.org/abs/2101.06856">https://arxiv.org/abs/2101.06856</a></li><li>softmax上的优化<br>sampled softmax <a href="https://arxiv.org/abs/2203.16868">https://arxiv.org/abs/2203.16868</a><br>Function merging <a href="https://arxiv.org/abs/1909.12415">https://arxiv.org/abs/1909.12415</a></li><li>U上的优化<br>pruned rnnt <a href="https://arxiv.org/abs/2206.13236">https://arxiv.org/abs/2206.13236</a></li><li>T上的优化<br>subsampling <a href="https://arxiv.org/abs/1811.05097">https://arxiv.org/abs/1811.05097</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>论文总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>INTERNAL LANGUAGE MODEL ESTIMATION FOR DOMAIN-ADAPTIVE END-TO-END SPEECH RECOGNITION</title>
    <link href="/2022/07/01/ilme/"/>
    <url>/2022/07/01/ilme/</url>
    
    <content type="html"><![CDATA[<p>作者:Zhong Meng, Sarangarajan Parthasarathy, Eric Sun, Yashesh Gaur, Naoyuki Kanda, Liang Lu, Xie Chen, Rui Zhao, Jinyu Li, Yifan Gong<br>机构:  Microsoft Corporation, Redmond, WA, USA arXiv:2011.01991v1<br>链接:   <a href="https://arxiv.org/abs/2011.01991">https://arxiv.org/abs/2011.01991</a>      </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>通过引入外部语言模型来实现adapt，提出一个不限制e2e模型的集成外部语言模型方式</p><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><h4 id="Shallow-Fusion"><a href="#Shallow-Fusion" class="headerlink" title="Shallow Fusion"></a>Shallow Fusion</h4><p>在beam search时引入外部语言模型，虽然后面又提出deep fusion，cold fusion，Simple Fusion and Component Fusion等方法，但是这些方法引入额外的计算代价和训练步骤，因此没有取代sf。<br><img src="https://s2.loli.net/2022/07/01/Ers2CXivb3acA8l.png" alt="sf">       </p><h4 id="Density-Ratio-Method-In"><a href="#Density-Ratio-Method-In" class="headerlink" title="Density Ratio Method In"></a>Density Ratio Method In</h4><p>类似于hybrid模型，将e2e的后验按照声学和语言分解<br><img src="https://s2.loli.net/2022/07/01/YVfHzTXE6NvjCak.png" alt="source"><br><img src="https://s2.loli.net/2022/07/01/HAC9qIuBLrc6XJp.png" alt="target"><br>我们认为声学部分两边是一样的，就得到下面的式子：<br><img src="https://s2.loli.net/2022/07/01/aguEGKbXBJItfOW.png" alt="ratio"><br>x部分在given x的情况下对所有y不变，所以只需要考虑y部分，y部分实际是两个domain语言模型后验的比值，于是我们得出西面的fusion方式。<br><img src="https://s2.loli.net/2022/07/01/HNcb6vUMVKZCnfp.png" alt="image.png"><br>注意语言模型单独训练和e2e系统是两个模型。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h4><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
      <tag>lm</tag>
      
      <tag>domain adapt</tag>
      
      <tag>aed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Memory-Efficient Training of RNN-Transducer with Sampled Softmax</title>
    <link href="/2022/07/01/rnnt-0701/"/>
    <url>/2022/07/01/rnnt-0701/</url>
    
    <content type="html"><![CDATA[<p>作者：Jaesong Lee1∗, Lukas Lee1∗, Shinji Watanabe<br>关键词：RNN-T softmax </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>RNN-T训练由于最后的输出是TxUxV的矩阵并且要过softmax这就导致这个矩阵的所有变量及其梯度都要存储，导致大量的显存占用。之前的一些方法会采用降低最后的矩阵的尺度来降低显存的占用比如使用sylable降低V，通过降采样降低T来减少显存的占用。还有一些降低padding，预训练的策略来加速rnn-t的训练。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li>sampled softmax降低训练的显存占用<br><img src="https://s2.loli.net/2022/07/01/m4EMR9uNVkUyFpq.png"><br>只包括对齐中需要的字的后验<br>Vneg源自对剩下字的采样<br><img src="https://s2.loli.net/2022/07/01/tRVawyj2AW1kfiI.png"></li></ol><p>这样的话最终计算对齐的矩阵就减小到了TxUxsmaple-V<br>但是如果采样的方式不合理会导致对部分字的后验估计错误导致解码出现不该出现的字。<br>2. 样本单独采样<br>一般的sample-softmax一个batch共用一组正负集合，这就使得在batch较大的时候，正集合变得很大，而负集合也必须跟着扩大，无法有效的降低显存。这里采用每个样本单独的正负集合来降低现存的占用，这样即使batch-size较大，两个集合也不会过大。<br>3. 利用ctc的头来协助采样<br>采样需要一个分布，如果按照平均分布肯定是不合理，我们肯定是希望让预测错误的部分进入loss来让模型学习正确的结果，但是如果每次都进行一次解码来得到后验就加大了显存的消耗，而作为正则的ctc与rnn-t的最终输出有相关性，所以我们就使用ctc的头的后验去除正字符后作为采样的分布使用。<br>4. CTC-constrained 解码<br>由于训练的时候的后验基于ctc的分布，所以解码时候我们也要引入ctc，否则会出现很多没有被正确建模概率的字，我们将ctc头的结果选出topk个字作为解码空间进行rnn-t的解码。    </p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="数据："><a href="#数据：" class="headerlink" title="数据："></a>数据：</h4><p>LibriSpeech、Aishell-1，CSJ<br>libriseech对比不同的建模单元数<br>aishell-1使用4231     </p><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p><img src="https://s2.loli.net/2022/07/01/3Sdkzw54O9Zifpb.png"><br><img src="https://s2.loli.net/2022/07/01/BTWOthFCHvpPsu2.png">     </p><p><img src="https://s2.loli.net/2022/07/01/fpZTOrU5EHn3bBw.png">  </p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnnt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PROGRESSIVE VOICE TRIGGER DETECTION Latency Control for Keyword Spotting</title>
    <link href="/2022/06/30/kws-0630/"/>
    <url>/2022/06/30/kws-0630/</url>
    
    <content type="html"><![CDATA[<p>作者: Christin Jose, Joseph Wang, Grant P. Strimel, Mohammad Omar Khursheed, Yuriy Mishchenko,<br>Brian Kulis<br>机构: Amazon Science, United States<br>关键词: kws,max-pooling<br>链接:  <a href="https://arxiv.org/pdf/2206.07261.pdf">https://arxiv.org/pdf/2206.07261.pdf</a>       </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>maxpooling不需要用对齐模型生成label，但是会导致额外的延迟，因为模型会倾向于多看一点下文再判断，而有时候我们需要灵活的控制延迟，像celoss我们就可以移动label来控制。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>原始的maxpooling loss 对于正样例选取正类别后验最高的一帧算loss，对于负样例则选取负类别后验最低的一帧算loss<br><img src="https://s2.loli.net/2022/06/30/F3aUJjMI4uRzBkm.png" alt="maxpooling.png"><br>本文在选取正样例的位置的时候加了一个前移的随机量，这个量服从伯努利分布，通过控制分布中为1的概率参数，来控制前移的幅度。<br><img src="https://s2.loli.net/2022/06/30/Nf8Hl96Ja4wgztE.png" alt="maxpooling2.png"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h4><p>cnn网络，64维 Mel-filterbank energy (LFBE) features<br><img src="https://s2.loli.net/2022/06/30/Xv6K58AUHR3CGak.png" alt="cnn.png"></p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p>准确度上b越大效果越差，0.1,0.2下和celoss性能相当<br><img src="https://s2.loli.net/2022/06/30/LkxMH2tpiXzvQ6c.png" alt="res1.png"><br>对时延的影响也符合预期<br><img src="https://s2.loli.net/2022/06/30/McBSfbCE1x8kaZ5.png" alt="res2.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>复现简单，解决实际问题。</p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kws</tag>
      
      <tag>maxpooling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pruned RNN-T for fast, memory-efficient ASR training</title>
    <link href="/2022/06/30/puned-rnnt/"/>
    <url>/2022/06/30/puned-rnnt/</url>
    
    <content type="html"><![CDATA[<p>作者:  Fangjun Kuang, Liyong Guo, Wei Kang,Long Lin, Mingshuang Luo, Zengwei Yao, Daniel Povey Xiaomi<br>机构:  Xiaomi Corp., Beijing, China<br>关键词: RNN-T, memory-efficient<br>链接:  <a href="https://arxiv.org/abs/2206.13236">https://arxiv.org/abs/2206.13236</a>       </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>RNN-T 输出一个四维的矩阵(N,T,U,V)，N为batch size，T为时间，U为序列长度，V为词典大小，V很大的情况下，训练显存占用太大了，之前有很多减少显存占用的工作，比如去除padding，在logits上计算梯度，本文提出一种方法，用S取代U，S&lt;&lt;U，从而降低内存占用。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>rnn-t三个部分：encoder，predictor，joint network  </p><ul><li>encdoer输出(T,E)维度的矩阵，E为encoder输出维度。</li><li>predictor基于之前的非blank标签预测下一个token的分布，输出(U+1,D)维度的矩阵</li><li>joiner 组合两边的输出得到(T,U+1,V)其中L[t,u,v]代表token v在t时刻出现given y[0…u]<br>rnn-t的解码图如下：<br><img src="https://s2.loli.net/2022/06/30/4IlWAgayPXZqc3J.png" alt="decode graph"><br>我们用y代表离开这个node的概率，blank代表水平移动的概率<br><img src="https://s2.loli.net/2022/06/30/or47tnRgGOkYZSA.png"><br>α(t,u)代表看到x[0…t]输出y[0…u]的log输出，推理过程如下：<br><img src="https://s2.loli.net/2022/06/30/Bb5gYoLpvxc1eWH.png"><br>包括上一个t从u水平过来和从上一个token跳过来<br><img src="https://s2.loli.net/2022/06/30/bFtRO1g7Quz8r4X.png"><br>最终RNN-T的输出是(NTUV)和ctc和aed模型的(NTV)&#x2F;(NUV)他的消耗大得多。<br><img src="https://s2.loli.net/2022/06/30/hvYzo78GLUNkrQK.png"><br>而实际上大部分梯度接近0，中间部分的梯度比较明显，可以看到训练后模型梯度非常集中，有点类似对齐的感觉。</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="Trivial-joiner-network"><a href="#Trivial-joiner-network" class="headerlink" title="Trivial joiner network"></a>Trivial joiner network</h4><p>避免引入一个很大线性层<br><img src="https://s2.loli.net/2022/06/30/cKFPTlHtoWOZwyq.png"></p><h4 id="Pruning-bounds"><a href="#Pruning-bounds" class="headerlink" title="Pruning bounds"></a>Pruning bounds</h4><p>引入常量S，只在S范围内计算loss，S之外的部分置为负无穷。这就需要我们找到一个S的边界，使得这个边界内的后验是最大的，本文提出一种估计方法，来估计S的起始位置。<br>设S&#x3D;4，起始为2，那么估计为<br><img src="https://s2.loli.net/2022/06/30/bGyI5fmTt762EBq.png"><br>我们需要找到其中最大的起始位置：<br><img src="https://s2.loli.net/2022/06/30/HegPh1UVbO72E6Q.png"><br>孤立着看很难理解，但是如果连续看T就能理解了。<br>为了裁剪的合理，进一步约束了起始点的位置，不能倒退，不能一步超过S。<br><img src="https://s2.loli.net/2022/06/30/DCIU6Ac4ouvWwHj.png"></p><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p><img src="https://s2.loli.net/2022/06/30/YoK7lCyx1PzhdVL.png"><br><img src="https://s2.loli.net/2022/06/30/cqprab2XtOSzHNo.png"><br><img src="https://s2.loli.net/2022/06/30/G9TIZL2eXHjvScE.png"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p>比较了性能和训练效率两个方面。<br><img src="https://s2.loli.net/2022/06/30/wg7Z3etybuCPlin.png"><br><img src="https://s2.loli.net/2022/06/30/exbscahmIDEiRwT.png"><br><img src="https://s2.loli.net/2022/06/30/HFul9zKdeqQjWN1.png">   </p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asr</tag>
      
      <tag>rnn-t</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Improving CTC-based ASR Models with Gated Interlayer Collaboration</title>
    <link href="/2022/06/30/ctc-0630/"/>
    <url>/2022/06/30/ctc-0630/</url>
    
    <content type="html"><![CDATA[<p>作者：Yuting Yang, Yuke Li, Binbin Du<br>机构：网易<br>关键词：CTC、流式、文本融合           </p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>ctc的独立性假设不合理，无法在模型前向中利用到文本信息</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>encoder使用conformer<br>提出一种融合方法gated interlayer collaboration （GIC）<br>首先将隐状态过一个线性层映射到字典维度得到后验，之后过embedding得到textual feature     </p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653620245806/9-pCZOsHA.png"></p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653620256457/qabF0GuNs.png"></p><p>通过门控的方式融合两个模态</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653620298741/K8ecK9ker.png"></p><p>最终loss是原本的ctcloss加上所有的中间CTC的平均值</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653620353727/4jlpuJez_.png"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h4><ul><li>实验数据<br>aishell-1 数据堂</li></ul><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1653627039503/eTfIiAjja.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实跟<br><a href="https://arxiv.org/pdf/2104.02724.pdf">Relaxing the Conditional Independence Assumption of CTC-based ASR<br>by Conditioning on Intermediate Predictions</a><br>相比就是加了一个embedding和加权相加</p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctc</tag>
      
      <tag>asr</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
